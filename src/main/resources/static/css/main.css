/* Main styles: main.css */
/* Settings and variables */
*, *::before, *::after {
	box-sizing: border-box;
}
:root {
	/* Define accent colors */
	--background: white;
	--foreground: black;
	--accent-1-light: #55f162e5;
	--accent-1-dark: #0b8e16e5;
	--accent-2-light: #2ff3b2;
	--accent-2-dark: hsl(160, 89%, 40%);
	--accent-3-light: #66bffa;
	--accent-3-dark: #2c6daa;
	/*General sizings*/
	--button-border-width: 3px;
}

/*All the dark theme does is redefine the foreground and background colors.*/
@media screen and (prefers-color-scheme: dark) {
	:root {
		--background: #272727;
		--foreground: white;
	}
}

/* Basic styling */
body {
	position: absolute;
	top: 0;
	padding: 0;
	margin: 0;
	min-width: 100%;
	max-width: 100%;
	min-height: 100%;
	font-family: 'Noto Sans', 'Segoe UI', 'Segoe UI Symbol', sans-serif;
	background: var(--background);
	color: var(--foreground);
}

h1, h2, h3, h4, h5, h6, div#language-edit-container > label {
	margin-block-start: 1rem;
	margin-block-end: 0.5rem;
	margin-block: 0;
	font-family: Balthazar, Caveat, 'Noto Sans', cursive;
	font-size: 140%;
}
h1 { font-size: 300%; }
h2 { font-size: 200%; }
h3 { font-size: 180%; }
h4 { font-size: 160%; }

.hidden {
	display: none !important;
}

a {
	color: var(--accent-2-light);
	text-decoration: none;
}
a:visited {
	color: var(--accent-2-dark);
}

hr {
	margin: 3em 0;
}

/* CSS GRID 4THEWIN! */
#page {
	display: grid;
	min-height: 250px;
}

aside {
	grid-area: help;
	text-align: justify;
	text-justify: auto;
	width: 100%;
}

main {
	grid-area: main;
}

footer {
	grid-area: footer;
	display: grid;
	place-content: center;
}

/* Help toggle logic */
#help-toggle:checked ~ #helptext {
	display: none;
}
#help-toggle {
	position: absolute;
	top: -2000px;
}
#help-toggle-label:hover {
	cursor: s-resize;
}
#help-toggle:checked ~ #help-toggle-label:hover {
	cursor: help;
}

/* Navigation styles */
header {
	background: var(--accent-1-light);
	text-align: center;
	position: fixed;
	width: 100%;
	z-index: 9999;
}

header .logo {
	margin: 0.5rem 0;
	height: 1.5cm;
}

.nav-toggle {
	position: absolute;
	height: 0;
	top: -2000px;
}
.nav-toggle-label {
	position: absolute;
	top:0;
	left:0;
	margin-left: 1em;
	height: 100%;
	display: flex;
	align-items: center;
}
.nav-toggle-label span,
.nav-toggle-label span::after,
.nav-toggle-label span::before {
	display: block;
	background: var(--background);
	width: 2em;
	height: 2px;
	border-radius: 2px;
	position: relative;
}
.nav-toggle-label span::after,
.nav-toggle-label span::before  {
	content: '';
	position: absolute;
}
.nav-toggle-label span::before {
	bottom: 10px;
}
.nav-toggle-label span::after {
	top: 10px;
}

nav {
	position: absolute;
	text-align: left;
	top:  100%;
	left: 0;
	background: var(--accent-1-light);
	width: 100%;
	transform: scale(1, 0);
	transform-origin: top;
	transition: transform 400ms ease-in-out;
}

nav ul {
	margin: 0;
	padding: 0;
	list-style: none;
}

nav li {
	margin-bottom: 1rem;
	margin-left: 1rem;
}

nav li {
	color: var(--background);
	font-size: 1.2rem;
	text-transform: uppercase;
	opacity: 0;
	transition: opacity 150ms ease;
}
/*remove default styling for links*/
nav a, nav a:visited {
	color: inherit;
	text-decoration: none;
}

nav li:hover {
	color: var(--foreground);
}
/* Magic pseudo-class which enables the navbar on checking the checkbox */
.nav-toggle:checked ~ nav {
	transform: scale(1,1);
}

.nav-toggle:checked ~ nav li {
	opacity: 1;
	transition: opacity 250ms ease 150ms;
}

/* Table styles */
table caption {
	display: none;
}
table.no-edge {
	border: none;
}
/* minimum spacings for table contents */
td, th {
	padding-left: 5px;
	padding-right: 5px;
}
tr {
	padding-top: 0.25rem;
}

#language-selection {
	font-size: 85%;
	break-inside: avoid;
}

/* Language pages layout */
section#new-language {
	margin-bottom: 1.5em;
}
input#new-language-dialog-open ~ div#new-language-dialog {
	display: none;
}
input#new-language-dialog-open:checked ~ div#new-language-dialog {
	display: grid;
}
div#new-language-dialog {
	margin-top: 1.5em;
	grid-auto-rows: auto;
	grid-template-columns: auto;
	row-gap: 0.5em;
}
div#new-language-dialog > * { margin-right: auto; }

div#language-edit-container {
	display: grid;
	grid-template-columns: auto;
	grid-auto-rows: min-content;
	row-gap: 0.25em;
	margin-bottom: 2em;
}
div#language-edit-container > * {
	/*allows each element to take its preferred width*/
	margin-right: auto;
}
div#language-edit-container > :not(label) {
	margin-bottom: 0.5em;
}

div#language-create-container {
	display: grid;
	/* if necessary, descriptor colum will take up at most 1/4 of body width */
	grid-template-columns: [labl-start] minmax(3em, 1fr) [labl-end inpt-start] 3fr [inpt-end];
	grid-auto-rows: min-content;
	column-gap: 0.5em;
	row-gap: 0.75em;
	margin-bottom: 2em;
}
div#language-create-container > label {
	/* by forcing all labels into the first column, all other elements are in the second column */
	grid-column: labl;
}
div#language-create-container > :not(label) {
	grid-column: inpt;
}

input#language-id-edit {
	width: 3em;
}

/* Language select button */
input[type="button"].language-select, input[type="button"].language-select:hover, input[type="button"].language-select:active, input[type="button"].language-select:focus {
	background: none;
	color: var(--foreground);
	border: none;
	outline: none;
	padding: 0;
	margin: 0;
	font-size: 110%;
	width: 2em;
	height: 2em;
}
input[type="button"].language-select::before {
	display: none;
}

/* Word pages layout */

div#dictionary-container {
	display: grid;
	grid-template-columns: [word-start] 1fr [word-end type-start] 1fr [type-end translations-start] minmax(8pc, 1fr) [translations-end definition-start] 1fr [definition-end];
	grid-auto-rows: auto;
	grid-auto-flow: row;
}
div#dictionary-container > * {
	grid-column: 1;
}
div#dictionary-container > .dictionary-header {
	font-weight: bold;
}
div#dictionary-container > .dictionary-content {
	overflow: hidden;
	overflow: clip;
}
div#dictionary-container > .word {
	grid-column: word;
}
div#dictionary-container > .word-type {
	grid-column: type;
}
div#dictionary-container > .translations {
	grid-column: translations;
}
div#dictionary-container > .definition {
	grid-column: definition;
}

div.page-navigation {
	display: flex;
	flex-direction: row;
	flex-wrap: nowrap;
	justify-content: space-between;
}

select#page-size-select {
	margin-left: 1em;
}

/* Form styles */

input, textarea {
	color: inherit;
	background: none;
	outline: none;
	border-radius: 0;
	border-color: var(--accent-1-dark);
	border-style: solid;
	transition: all 100ms linear;
	font: inherit;
}
input:not(:read-only):focus, textarea:not(:read-only):focus {
	border-color: var(--accent-1-light);
}

textarea {
	width: 100%;
	resize: vertical;
	min-height: 3em;
}

textarea.borderless, input.borderless {
	border: none;
	background: none;
	color: inherit;
}

select {
	color: inherit;
	background: none;
	outline: none;
	border-radius: 0;
	border-color: var(--accent-3-dark);
	border-style: solid;
	transition: all 100ms linear;
	font: inherit;
}

/* Buttons */

input[type=button], button {
	background: none;
	border: var(--button-border-width) solid var(--accent-3-dark);
	font: inherit;
	color: inherit;
	border-radius: 0;
	position: relative;
	margin: 0;
	padding: 0.5em 1.5em;
	font-weight: bold;
}
input[type=button]::after, button::after {
	content: '';
	display: block;
	position: absolute;
	background: var(--accent-3-light);
	height: 100%;
	width: 0;
	left: 0;
	bottom: 0;
	top: 0;
	z-index: -1;
	transition: width 50ms ease;
}
input[type=button]:hover::after, button:hover::after {
	width: 100%;
	transition: width 150ms ease;
}
input[type=button]:active, button:active,
input[type=button]:focus, button:focus {
	background: var(--accent-3-light);
	outline: none;
}

input[type=button]:disabled, button:disabled {
	opacity: 50%;
}

/* The progress animation makes the element slide across its container horizontally
 while increasing and decreasing in size. */
@keyframes button-progress {
	0% {
		animation-timing-function: ease-in;
		width: 0;
		left: 0;
	}
	50% {
		animation-timing-function: ease-out;
		left: 0;
		width: 100%;
	}
	100% {
		width: 0;
		left: 100%;
	}
}

input[type=button].progress::after, button.progress::after {
	transition: none;
	animation-name: button-progress;
	animation-duration: 1.5s;
	animation-iteration-count: infinite;
}